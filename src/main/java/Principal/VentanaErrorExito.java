/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Principal;

import java.awt.Component;
import java.awt.Desktop;
import java.awt.Image;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import net.coderazzi.filters.gui.AutoChoices;
import net.coderazzi.filters.gui.TableFilterHeader;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author sopor
 */
public class VentanaErrorExito extends javax.swing.JDialog {

    /**
     * Creates new form VentanaErrorExito
     */
    public VentanaErrorExito(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        TableFilterHeader filter = new TableFilterHeader(jTable1, AutoChoices.ENABLED);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Error/Exito", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Segoe Script", 0, 12))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Folio", "Descripcion", "Estado"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jMenu1.setText("Menu");

        jMenuItem1.setText("Exportar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            // TODO add your handling code here:
            exportDataToExcel(jTable1, "ErrorExito");
        } catch (IOException ex) {
            Logger.getLogger(VentanaErrorExito.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    public void exportDataToExcel(JTable tabla, String texto) throws IOException {
        try {
            System.out.println(System.getProperty("user.dir") + "\\" + texto + ".xlsx");
            File archivoXLS = new File(System.getProperty("user.dir") + "\\" + texto + ".xlsx");
            if (archivoXLS.exists()) {
                archivoXLS.delete();
            }
            archivoXLS.createNewFile();
            Workbook libro = new XSSFWorkbook();
            FileOutputStream archivo = new FileOutputStream(archivoXLS);
            Sheet hoja = libro.createSheet(texto);
            hoja.setDisplayGridlines(true);
            org.apache.poi.ss.usermodel.Font headerFont = libro.createFont();
            headerFont.setColor(IndexedColors.WHITE.index);
            CellStyle headerCellStyle = hoja.getWorkbook().createCellStyle();
            headerCellStyle.setFillForegroundColor(IndexedColors.VIOLET.index);
            headerCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            headerCellStyle.setFont(headerFont);

            for (int f = 0; f < tabla.getRowCount(); ++f) {
                Row fila = hoja.createRow(f);
                for (int c = 0; c < tabla.getColumnCount(); ++c) {
                    Cell celda = fila.createCell(c);
                    if (f == 0) {
                        celda.setCellStyle(headerCellStyle);
                        celda.setCellValue(tabla.getColumnName(c));
                    }
                }
            }

            int filaInicio = 1;
            for (int f2 = 0; f2 < tabla.getRowCount(); ++f2) {
                Row fila2 = hoja.createRow(filaInicio);
                ++filaInicio;
                for (int c2 = 0; c2 < tabla.getColumnCount(); ++c2) {
                    if (c2 != tabla.getColumnCount()) {
                        Cell celda2 = fila2.createCell(c2);
                        if (tabla.getValueAt(f2, c2) instanceof Double) {
                            celda2.setCellValue(Double.parseDouble(tabla.getValueAt(f2, c2).toString()));
                        } else if (tabla.getValueAt(f2, c2) instanceof Float) {
                            celda2.setCellValue(Float.parseFloat(tabla.getValueAt(f2, c2).toString()));
                        } else {
                            try {
                                celda2.setCellValue(Integer.valueOf(tabla.getValueAt(f2, c2).toString().replace(".", "")));
                            } catch (Exception ex) {
                                celda2.setCellValue(tabla.getValueAt(f2, c2).toString());
                            }
                        }
                    }
                }
            }

            libro.write(archivo);
            archivo.close();
            Desktop.getDesktop().open(archivoXLS);
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

class CustomRenderer extends DefaultTableCellRenderer {

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        System.out.println("Renderer 2");
        System.out.println("value.toString() " + value.toString());
        if (value.toString().equals("true")) {
            ImageIcon imageIcon = new ImageIcon("icons\\good.png");
            Image image = imageIcon.getImage();
            Image newimg = image.getScaledInstance(25, 25, java.awt.Image.SCALE_SMOOTH);
            imageIcon = new ImageIcon(newimg);
            setIcon(imageIcon);
            setHorizontalAlignment(JLabel.CENTER);
        } else if (value.toString().equals("false")) {
            ImageIcon imageIcon = new ImageIcon("icons\\bad.png");
            Image image = imageIcon.getImage();
            Image newimg = image.getScaledInstance(25, 25, java.awt.Image.SCALE_SMOOTH);
            imageIcon = new ImageIcon(newimg);
            setIcon(imageIcon);
            setHorizontalAlignment(JLabel.CENTER);
        }

        return this;
    }
}
